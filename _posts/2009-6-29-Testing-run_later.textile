---
layout: post
title: Testing run_later in Merb with RSpec
---

I couldn't find any posts about how to make sure the code I'm running inside my run_later block is getting called. Here's the situation.

app/controllers/awesome.rb
{% highlight ruby %}
  class Awesome < Application
    def update

      run_later do
        Awesome.import_massive_junk
      end

      redirect(url(:sweet))
    end
  end
{% endhighlight %}

app/controllers/awesome_spec.rb
{% highlight ruby %}
  describe Awesome do
    it "should import_massive_junk" do
      Awesome.should_recieve(:import_massive_junk)
      dispatch_to(Awesome, :update)
    end
  end
{% endhighlight %}

This will fail, because Awesome.import_massive_junk just gets added to the work_queue and hasn't bee run in time for the test to finish and fail. You could just put 'sleep 1' in there, but that would just be stupid. Instead I found just calling the proc in the work_queue does the trick:

app/controllers/awesome_spec.rb
{% highlight ruby %}
  describe Awesome do
    it "should import_massive_junk" do
      Awesome.should_recieve(:import_massive_junk)
      dispatch_to(Awesome, :update)
      Merb::Dispatcher.work_queue.pop.call
    end
  end
{% endhighlight %}

Hope this helps someone out. If you find a better way let me know!
